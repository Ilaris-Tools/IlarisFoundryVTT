name: 🧪 Deploy Ilaris to Test Server (develop)

on:
    push:
        branches: [develop]
    workflow_dispatch:
        inputs:
            force_deploy:
                description: 'Force deployment (skip some validations)'
                required: false
                default: false
                type: boolean

env:
    SYSTEM_NAME: 'Ilaris'
    SYSTEM_PATH: '/home/leo/docker/foundryvtt-public/foundry/data/Data/systems/Ilaris'

jobs:
    validate:
        name: 🔍 Validate System Files
        runs-on: ubuntu-latest

        outputs:
            system-version: ${{ steps.system-info.outputs.version }}
            system-title: ${{ steps.system-info.outputs.title }}

        steps:
            - name: 📥 Checkout Repository
              uses: actions/checkout@v4

            - name: 🔍 Validate system.json
              id: system-info
              run: |
                  echo "🔍 Validating system.json..."

                  if [ ! -f "system.json" ]; then
                    echo "❌ system.json not found"
                    exit 1
                  fi

                  # JSON Syntax prüfen
                  if ! jq empty system.json; then
                    echo "❌ system.json is not valid JSON"
                    jq . system.json || true
                    exit 1
                  fi

                  # Required fields prüfen
                  REQUIRED_FIELDS=("id" "title" "version" "compatibility")
                  for field in "${REQUIRED_FIELDS[@]}"; do
                    if ! jq -e ".$field" system.json > /dev/null; then
                      echo "❌ system.json missing required field: $field"
                      exit 1
                    fi
                  done

                  # System info extrahieren
                  SYSTEM_ID=$(jq -r '.id' system.json)
                  SYSTEM_TITLE=$(jq -r '.title' system.json)
                  SYSTEM_VERSION=$(jq -r '.version' system.json)
                  MIN_FOUNDRY=$(jq -r '.compatibility.minimum' system.json)
                  VERIFIED_FOUNDRY=$(jq -r '.compatibility.verified' system.json)

                  echo "✅ system.json is valid"
                  echo "📋 System ID: $SYSTEM_ID"
                  echo "📋 System Title: $SYSTEM_TITLE"
                  echo "📋 System Version: $SYSTEM_VERSION"
                  echo "📋 Foundry Compatibility: $MIN_FOUNDRY - $VERIFIED_FOUNDRY"

                  # Outputs für andere Jobs setzen
                  echo "version=$SYSTEM_VERSION" >> $GITHUB_OUTPUT
                  echo "title=$SYSTEM_TITLE" >> $GITHUB_OUTPUT

                  # Prüfen ob System ID korrekt ist
                  if [ "$SYSTEM_ID" != "ilaris" ]; then
                    echo "⚠️ Warning: System ID is '$SYSTEM_ID', expected 'ilaris'"
                  fi

            - name: 🔍 Validate template.json
              run: |
                  if [ -f "template.json" ]; then
                    echo "🔍 Validating template.json..."
                    if ! jq empty template.json; then
                      echo "❌ template.json is not valid JSON"
                      jq . template.json || true
                      exit 1
                    fi
                    echo "✅ template.json is valid"
                    
                    # Template structure prüfen
                    if jq -e '.Actor' template.json > /dev/null; then
                      ACTOR_TYPES=$(jq -r '.Actor.types[]?' template.json | tr '\n' ', ' | sed 's/,$//')
                      echo "📋 Actor Types: $ACTOR_TYPES"
                    fi
                    
                    if jq -e '.Item' template.json > /dev/null; then
                      ITEM_TYPES=$(jq -r '.Item.types[]?' template.json | tr '\n' ', ' | sed 's/,$//')
                      echo "📋 Item Types: $ITEM_TYPES"
                    fi
                  else
                    echo "ℹ️ template.json not found (optional)"
                  fi

            - name: 🔍 Analyze System Structure
              run: |
                  echo "🔍 Analyzing system structure..."

                  # JavaScript Dateien
                  JS_FILES=$(find . -name "*.js" -type f ! -path "./.git/*" ! -path "./node_modules/*" | wc -l)
                  echo "📜 JavaScript files: $JS_FILES"
                  if [ $JS_FILES -gt 0 ]; then
                    echo "   Main files:"
                    find . -name "*.js" -type f ! -path "./.git/*" ! -path "./node_modules/*" | head -5 | sed 's/^/   - /'
                    if [ $JS_FILES -gt 5 ]; then
                      echo "   ... and $((JS_FILES - 5)) more"
                    fi
                  fi

                  # CSS Dateien
                  CSS_FILES=$(find . -name "*.css" -type f ! -path "./.git/*" | wc -l)
                  echo "🎨 CSS files: $CSS_FILES"
                  if [ $CSS_FILES -gt 0 ]; then
                    find . -name "*.css" -type f ! -path "./.git/*" | sed 's/^/   - /'
                  fi

                  # Handlebars Templates
                  HBS_FILES=$(find . -name "*.hbs" -type f ! -path "./.git/*" | wc -l)
                  echo "📋 Handlebars templates: $HBS_FILES"

                  # Language files
                  LANG_FILES=$(find . -name "*.json" -path "*/lang/*" -type f | wc -l)
                  echo "🌍 Language files: $LANG_FILES"
                  if [ $LANG_FILES -gt 0 ]; then
                    find . -name "*.json" -path "*/lang/*" -type f | sed 's/^/   - /'
                  fi

                  # Größe berechnen
                  TOTAL_SIZE=$(du -sh . | cut -f1)
                  echo "📏 Total system size: $TOTAL_SIZE"

    deploy:
        name: 🧪 Deploy to Test Server
        runs-on: ubuntu-latest
        needs: validate
        # Deploy bei: Push auf develop ODER manual workflow_dispatch
        if: ${{ github.ref == 'refs/heads/develop' || github.event_name == 'workflow_dispatch' }}

        steps:
            - name: 🧪 Deploy to Test Server via SSH
              uses: appleboy/ssh-action@v1.0.3
              with:
                  host: ${{ secrets.HOST }}
                  username: ${{ secrets.USERNAME }}
                  key: ${{ secrets.SSH_PRIVATE_KEY }}
                  port: ${{ secrets.PORT }}
                  script: |
                      echo "🧪 Starting Ilaris Test Server deployment..."
                      echo "📍 System Version: ${{ needs.validate.outputs.system-version }}"
                      echo "🔄 Deployment Type: TEST (develop branch)"
                      echo "🌿 Branch: develop"

                      # Zum Repository-Verzeichnis wechseln
                      cd /home/leo/docker/foundryvtt-public/foundry/data || {
                        echo "❌ Repository directory not found"
                        exit 1
                      }

                      # Develop branch auschecken
                      echo "🔄 Fetching develop branch..."
                      git fetch origin develop
                      git checkout develop
                      git reset --hard origin/develop

                      # Prüfen ob Deploy-Script existiert
                      if [ -f "deploy.sh" ]; then
                        echo "📋 Using deploy.sh script for TEST deployment"
                        chmod +x deploy.sh
                        # Deploy script mit TEST-Parametern aufrufen
                        FOUNDRY_SERVICE="foundry-test" FOUNDRY_DATA_PATH="/home/leo/docker/foundryvtt-internal/foundry/data" ./deploy.sh
                      else
                        echo "📋 Deploy script not found, running manual TEST deployment..."
                        
                        # Fallback: Manuelles TEST Deployment
                        sudo systemctl stop foundry-test
                        
                        SYSTEM_PATH="/home/leo/docker/foundryvtt-internal/foundry/data/Data/systems/Ilaris"
                        mkdir -p "$(dirname "$SYSTEM_PATH")"
                        rm -rf "$SYSTEM_PATH"
                        mkdir -p "$SYSTEM_PATH"
                        
                        rsync -av --exclude='.git' --exclude='.github' --exclude='README.md' --exclude='*.md' --exclude='.gitignore' . "$SYSTEM_PATH/"
                        
                        chown -R foundry:foundry "$SYSTEM_PATH"
                        chmod -R 755 "$SYSTEM_PATH"
                        
                        sudo systemctl start foundry-test
                        
                        echo "✅ Manual TEST deployment completed"
                      fi

            - name: 🎉 Test Deployment Success
              if: success()
              run: |
                  echo "🎉 Ilaris System successfully deployed to TEST server!"
                  echo "📋 Version: ${{ needs.validate.outputs.system-version }}"
                  echo "🧪 Target: TEST SERVER (develop branch)"
                  echo "🌿 Branch: develop"
                  echo ""
                  echo "🌐 Test system is now available at:"
                  echo "   🔗 https://foundry-test.dsa-nerds.com"
                  echo ""
                  echo "🔄 Players may need to refresh to see changes"
                  echo "⚠️  This is a TEST deployment - not production!"

            - name: ❌ Test Deployment Failed
              if: failure()
              run: |
                  echo "❌ TEST deployment failed!"
                  echo "🔍 Common issues:"
                  echo "   - SSH connection problems (check HOST, USERNAME, SSH_PRIVATE_KEY, PORT secrets)"
                  echo "   - Test deploy script errors"
                  echo "   - Foundry VTT test service issues (foundry-test)"
                  echo "   - File permission problems"
                  echo "   - Disk space issues"
                  echo "   - Test data directory issues (/home/leo/docker/foundryvtt-public/foundry/data)"

    summary:
        name: 📊 Test Deployment Summary
        runs-on: ubuntu-latest
        needs: [validate, deploy]
        if: always()

        steps:
            - name: 📊 Test Summary Report
              run: |
                  echo "📊 Ilaris Test Server Deployment Summary"
                  echo "========================================"
                  echo ""
                  echo "🔍 Validation: ${{ needs.validate.result }}"
                  echo "🧪 Test Deployment: ${{ needs.deploy.result }}"
                  echo ""

                  if [ "${{ needs.validate.outputs.system-version }}" != "" ]; then
                    echo "📋 System: ${{ needs.validate.outputs.system-title }} v${{ needs.validate.outputs.system-version }}"
                  fi

                  echo "🧪 Target: TEST SERVER"
                  echo "🌿 Branch: develop"
                  echo "🌟 Commit: ${{ github.sha }}"
                  echo "👤 Author: ${{ github.actor }}"
                  echo "⏰ Time: $(date -u)"

                  # Overall Status
                  if [ "${{ needs.deploy.result }}" == "success" ]; then
                    echo ""
                    echo "🎉 TEST DEPLOYMENT SUCCESSFUL!"
                    echo "   Your Ilaris develop branch is now live on the test server"
                    echo "   🔗 https://foundry-test.dsa-nerds.com"
                  elif [ "${{ needs.deploy.result }}" == "skipped" ]; then
                    echo ""
                    echo "⏭️ TEST DEPLOYMENT SKIPPED"
                    echo "   Check secrets configuration or branch restrictions"
                  elif [ "${{ needs.validate.result }}" == "failure" ]; then
                    echo ""
                    echo "❌ VALIDATION FAILED"
                    echo "   Fix system.json or template.json issues before deployment"
                  else
                    echo ""
                    echo "⚠️ TEST DEPLOYMENT ISSUES"
                    echo "   Check the logs above for details"
                  fi